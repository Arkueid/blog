{"meta":{"title":"一番の宝物★","subtitle":"つまらないのは時間じゃない、つまらないのは平凡な自分だ。","description":null,"author":"Arkueid","url":"http://arcueid.github.io/blog","root":"/blog/"},"pages":[{"title":"","date":"2024-10-10T02:51:14.718Z","updated":"2024-10-10T02:51:14.718Z","comments":true,"path":"custom.css","permalink":"http://arcueid.github.io/blog/custom.css","excerpt":"","text":""},{"title":"关于","date":"2023-05-03T01:35:00.000Z","updated":"2024-10-10T07:04:05.564Z","comments":true,"path":"about/index.html","permalink":"http://arcueid.github.io/blog/about/index.html","excerpt":"","text":"こんにちは！ 計算機科学と技術を専攻している在校中の大学生です。中国語と英語を話せます。今は日本語を勉強しています。 プログラミングとアニメに興味があるので、時々アニメ要素が込められたプロジェクトを作ることがあります。 よろしくお願いします！ 自我介绍计算机科学与技术在读本科生。正在学习日语。 因喜欢动漫，时不时写一些包含动漫要素的小项目。 学习中 Github"},{"title":"文章归档","date":"2022-12-13T03:08:42.911Z","updated":"2022-12-13T03:08:42.911Z","comments":true,"path":"archive/index.html","permalink":"http://arcueid.github.io/blog/archive/index.html","excerpt":"","text":""},{"title":"Categories","date":"2023-05-02T13:04:56.000Z","updated":"2023-05-02T13:05:20.676Z","comments":true,"path":"categories/index.html","permalink":"http://arcueid.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"我的朋友","date":"2022-12-13T03:53:52.049Z","updated":"2022-12-13T03:53:52.049Z","comments":true,"path":"friends/index.html","permalink":"http://arcueid.github.io/blog/friends/index.html","excerpt":"","text":""},{"title":"Tags","date":"2023-05-02T13:05:40.000Z","updated":"2023-05-02T13:05:52.114Z","comments":true,"path":"tags/index.html","permalink":"http://arcueid.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"日语动词变形再总结","slug":"日语词变形再总结","date":"2024-10-17T15:05:27.000Z","updated":"2024-10-19T07:45:17.067Z","comments":true,"path":"/日语词变形再总结/","link":"","permalink":"http://arcueid.github.io/blog/%E6%97%A5%E8%AF%AD%E8%AF%8D%E5%8F%98%E5%BD%A2%E5%86%8D%E6%80%BB%E7%BB%93/","excerpt":"","text":"了解词的各种形式，在分析句子结构，分析各种助词的搭配很有帮助。 动词连用形 ます形 て､た形 发生音变: く いて ぐ いで う､つ､る って ぶ､む､ぬ んで す して 未然形 ない形：う 段变为 あ 段 意志形 う よう 形 一类：词尾的 う 段假名变为 お 段再加 う 二类：去る加よう 三类动词：来る こよう､する こよう 假定形 ば形：结尾 う 段变为 え 段 命令形 三类动词： 来る 来い する しろ･せよ（后者更书面） 二类动词： 取 る 加 ろ 或者 よ 一类动词： う 段变为 え 段 终止形、连体形 动词的终止形和连体形就是动词原形 连体形：连接体言 形容词 连用形 く･かっ终止形和连体形，和原形一样假定形 いー&gt;けれ 形容动词 连用形 な･で･だっ连体形 な终止形 だ假定形 なら","categories":[{"name":"日语","slug":"日语","permalink":"http://arcueid.github.io/blog/categories/%E6%97%A5%E8%AF%AD/"}],"tags":[{"name":"日语语法","slug":"日语语法","permalink":"http://arcueid.github.io/blog/tags/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95/"}]},{"title":"日语名词分类","slug":"日语名词分类","date":"2024-10-11T02:08:14.000Z","updated":"2024-10-19T07:36:33.801Z","comments":true,"path":"/日语名词分类/","link":"","permalink":"http://arcueid.github.io/blog/%E6%97%A5%E8%AF%AD%E5%90%8D%E8%AF%8D%E5%88%86%E7%B1%BB/","excerpt":"","text":"日语中的名词属于体言。体言分为：名词，代名词，数词。 名词可分为： 名词（名詞･めいし） 名词 时间名词（時の名詞･ときのめいし） 时点名词：表示绝对时间的名词1，通常需要加に构成表时间的补语，但年份、和表示大概时间的~ごろ可以不用加 时段名词：一般情况下，加に表示在时期内的某个时间点，不加に表示整个过程中 形式名词 纯粹形式名词，如：こと、もの、の 有附加意义的形式名词：つもり、ため、ところ [1]: 与之相对的是表示相对时间的名词，如：明日。","categories":[{"name":"日语","slug":"日语","permalink":"http://arcueid.github.io/blog/categories/%E6%97%A5%E8%AF%AD/"}],"tags":[{"name":"日语语法","slug":"日语语法","permalink":"http://arcueid.github.io/blog/tags/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95/"}]},{"title":"二分查找中的边界问题","slug":"二分查找中的边界问题","date":"2024-05-14T02:57:22.000Z","updated":"2024-05-14T03:23:30.421Z","comments":true,"path":"/二分查找中的边界问题/","link":"","permalink":"http://arcueid.github.io/blog/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E4%B8%AD%E7%9A%84%E8%BE%B9%E7%95%8C%E9%97%AE%E9%A2%98/","excerpt":"","text":"防止溢出mid = left + (right - left) / 2 空循环对于mid, r, l都为int类型的循环：mid = left + (right - left) / 2中，若right - left &lt; 2则mid始终等于left，陷入死循环解决办法：r只可能为1，r=0不存在二分查找问题，mid = l + (r - l + 1) / 2， 区间边界更新每次迭代的区间边界更新分为两种情况： 如果mid本身符合条件 目标解在左区间，则r = mid 目标解在右区间，则l = mid 如果mid本身不符合条件 目标解在左区间，则r = mid - 1 目标解在右区间，则l = mid + 1","categories":[{"name":"算法","slug":"算法","permalink":"http://arcueid.github.io/blog/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://arcueid.github.io/blog/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"http://arcueid.github.io/blog/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"name":"边界问题","slug":"边界问题","permalink":"http://arcueid.github.io/blog/tags/%E8%BE%B9%E7%95%8C%E9%97%AE%E9%A2%98/"}]},{"title":"操作系统之输入输出重定向","slug":"操作系统之输入输出重定向","date":"2024-05-09T08:17:41.000Z","updated":"2024-05-09T08:46:15.802Z","comments":true,"path":"/操作系统之输入输出重定向/","link":"","permalink":"http://arcueid.github.io/blog/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91/","excerpt":"","text":"打开文件描述符表这个表由内核维护，所有进程共享。存放的是已打开的文件的描述符。该描述符记录了文件的地址（已读取至内存中）、引用计数等信息。 写入文件时，先将新数据写入文件缓冲区（也就是先修改内存中的文件拷贝），再将缓冲区的内容写入到磁盘。 关闭文件时，引用计数递减，当引用计数归0时，将文件缓冲区从内存中释放，同时该描述符标记为删除。 一个系统能同时打开的文件数量是有限制的。 文件描述符表每个进程在创建之初都会初始化一个文件描述符表fds[1024]，这个表是一个数组，长度通常为1024。fds中的文件描述符类似于一个索引，指向的是所有进程共享的打开文件描述符表。 不同文件描述符可以指向同一个打开文件描述符表项。 该表的前3个文件描述符fds[0]、fds[1]、fds[2]在创建时被分别初始化为STDIN_FILENO，STDOUT_FILENO，STDERR_FILENO，即标准输入，标准输出，标准错误。 不严谨的解释：对STDIN_FILENO的读操作，相当于读取键盘输入；对STDOUT_FILENO的写操作，相当于将字符打印到终端；对STDERR_FILENO的读操作相当于获取错误信息。Linux中一切皆文件，键盘、终端等设备通过文件的形式挂载到文件系统上，通过文件系统统一管理。 输入输出重定向当命令行输入一个”echo hello, yui &gt; hello.txt”的命令时，实际上经历了以下过程： 系统打开hello.txt，并获得描述符 运行命令行的进程调用fork创建子进程 由于”&gt;”的存在，子进程的文件描述符fds[2]，即STDOUT_FILENO被修改为了文件hello.txt，修改过程由dup2函数实现 子进程执行echo内容，“hello, yui”输出至fds[2]指向的文件。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://arcueid.github.io/blog/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://arcueid.github.io/blog/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"Docker-1-快速入门","slug":"Docker-1-快速入门","date":"2024-05-08T09:55:43.000Z","updated":"2024-05-08T11:01:28.604Z","comments":true,"path":"/Docker-1-快速入门/","link":"","permalink":"http://arcueid.github.io/blog/Docker-1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","excerpt":"","text":"Docker和虚拟机的区别虚拟机：宿主机操作系统-&gt;抽象硬件层-&gt;操作系统-&gt;应用软件 虚拟机使操作系统能够直接在宿主机的操作系统上运行，而不需要在宿主机上安装系统和引导 Docker: 宿主机操作系统-&gt;Docker-&gt;应用软件 Docker使应用程序能够在不同操作系统上运行，而不需要进行环境配置等前置操作 Docker核心概念 镜像（Image） 简单理解：应用程序+文件系统（包含运行环境）编写好的项目如果想在其他设备上运行，则使用Docker打包为镜像，将镜像作为一个整体，通过Docker在另一台设备上运行。 容器（Container） 简单理解：容器和镜像的关系就如同面向对象中的实例（容器）和类（镜像）镜像是静态的，而容器是动态的。类比程序和进程。 客户端（Client） 用户&#x2F;程序员通过Docker Client对容器、镜像等进行管理 Docker守护进程（Docker Daemon） 简单理解：Docker Server，用户通过Client操作Daenon，实际对镜像、容器进行操作的是Docker Daemon。 构建自己的镜像以vue项目为例 npm init vite 假设项目根目录为vue-demo vim vite.config.ts 将host改为0.0.0.0 // vite.config.ts ... server: &#123; host: &quot;0.0.0.0&quot;, port: 8080 &#125; ... 创建Dockerfile（文件名注意大小写） # Dockerfile FROM node:18 ADD . /app WORKDIR /app RUN npm i CMD npm run dev 创建dockerignore，排除不打包的文件和目录 # dockerignore node_modules 将当前目录打包为镜像 # 镜像版本=v1，镜像名称=vue-demo docker build -t vue-demo:v1 查看创建的镜像 docker images 创建容器并运行 docker run -d -p 80:8080 --name vue1 vue-demo:v1 查看正在运行的容器 docker ps 查看创建的容器列表 docker container ls 停止运行中的容器 docker stop 容器id/进程id 删除容器 docker rm 容器名称/容器id 删除镜像 docker rmi vue-demo:v1","categories":[{"name":"Docker","slug":"Docker","permalink":"http://arcueid.github.io/blog/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://arcueid.github.io/blog/tags/Docker/"}]},{"title":"单固态硬盘更换","slug":"单固态硬盘更换","date":"2024-05-05T11:28:40.891Z","updated":"2024-05-05T11:41:06.787Z","comments":true,"path":"/单固态硬盘更换/","link":"","permalink":"http://arcueid.github.io/blog/%E5%8D%95%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E6%9B%B4%E6%8D%A2/","excerpt":"","text":"单固态硬盘更换准备工作硬件 笔记本（旧固态硬盘） 新固态硬盘 闲置U盘 拆机工具（高精度螺丝刀） 移动硬盘盒 软件下载 WinPE，安装到U盘上。 数据迁移从U盘启动 WinPE以 win11 为例，打开设置，搜索“高级启动设置”，选择重启。 重启后自动进入选项界面，选择U盘启动，进入WinPE。 迁移系统到移动硬盘打开桌面的分区助手，选择迁移系统到移动硬盘，选择新固态硬盘，分配空间。 迁移其他数据到移动硬盘选择复制分区，将其他分区数据迁移到新固态硬盘。 这里分区顺序要和原硬盘分区顺序保持一致，否则进入系统会出各种问题。 更换硬盘数据迁移完毕后，关机断电，拆后盖，卸下旧硬盘将新硬盘换上。 重启重启，一般能够直接进入系统。","categories":[],"tags":[]},{"title":"Apache服务启动失败","slug":"apache2-4无报错但启动失败","date":"2023-05-10T07:38:10.000Z","updated":"2024-04-21T15:35:51.642Z","comments":true,"path":"/apache2-4无报错但启动失败/","link":"","permalink":"http://arcueid.github.io/blog/apache2-4%E6%97%A0%E6%8A%A5%E9%94%99%E4%BD%86%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/","excerpt":"","text":"按照网上教程在Windows系统上配置了PHP8和Apache2.4。 在Apache2.4&#x2F;bin目录下使用以下命令安装Apache2.4服务，安装成功。 .\\httpd.exe -k install 但是用管理员身份在提示符中输入如下命令，启动出现问题。 无论是 net start Apache2.4 或者 .\\httpd.exe -k start 均失败，且没有任何提示信息。 按照网上的说法，加入-w参数来输出错误信息。 .\\httpd -w -k start 仍然没有任何错误提示。 直接在Apache2.4&#x2F;bin下使用命令行： .\\httpd.exe 服务正常运行，并且页面可以服务。 于是问题可以归结为，以服务形式无法启动Apache，但是可以直接以程序形式运行。 找到Windows的日志文件：控制面板&gt;&gt;系统和安全&gt;&gt;Windows管理工具&gt;&gt;查看事件日志&gt;&gt;Windows日志&gt;&gt;应用程序 双击查看报错内容如下： The Apache service named reported the following error: &gt;&gt;&gt; httpd.exe: Syntax error on line 559 of D:/PHPWEB/Apache24/conf/httpd.conf: Cannot load php8apache2_4.dll into server: \\xd5\\xd2\\xb2\\xbb\\xb5\\xbd\\xd6\\xb8\\xb6\\xa8\\xb5\\xc4\\xc4\\xa3\\xbf\\xe9\\xa1\\xa3 . 说明是php拓展的路径问题，经过几番尝试，发现是php.ini中extension_dir设置需要设置绝对路径。 如下： 修改完之后重新以管理员身份打开一个命令行窗口，用下面的命令启动可以成功访问。 net start Apache2.4 或 .\\httpd.exe -k start","categories":[],"tags":[]},{"title":"Mysql触发器对同一张表进行操作","slug":"mysql触发器对同一张表进行操作","date":"2023-05-03T08:02:03.001Z","updated":"2024-04-21T15:34:25.977Z","comments":true,"path":"/mysql触发器对同一张表进行操作/","link":"","permalink":"http://arcueid.github.io/blog/mysql%E8%A7%A6%E5%8F%91%E5%99%A8%E5%AF%B9%E5%90%8C%E4%B8%80%E5%BC%A0%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/","excerpt":"","text":"title: mysql触发器对同一张表进行操作date: 2023-05-03 16:02:02tags: mysqlcategories: - 数据库 - 转载description: mysql触发器对同一张表进行操作不能使用update和insert触发器初始结构： DELIMITER $$ CREATE TRIGGER `数据库名`.`触发器名` BEFORE/AFTER INSERT/UPDATE/DELETE ON `数据库名`.`表名` FOR EACH ROW BEGIN -- 逻辑、条件语句 END$$ DELIMITER ; 目的：当一张表中的某个字段值更新为特定值时，触发更新本条数据的另一字段值 ( 示例:根据 prj_base_info 表中的 project_status 的值判断是否是600时，触发更新同表的 complete_time 字段的时间为系统当前时间 ) 开始写出的触发器如下所示 DROP TRIGGER IF EXISTS update_complete_time; DELIMITER $ CREATE TRIGGER update_complete_time AFTER UPDATE ON prj_base_info FOR EACH ROW BEGIN IF (new.project_status=600) THEN UPDATE prj_base_info SET complete_time =DATE_FORMAT(NOW(), &#39;%Y-%m-%d&#39;) WHERE prj_base_info.id = new.id; END IF; END $ 执行结果没有问题，创建触发器成功，但是执行 update 语句进行测试如下报错，提示：无法更新存储函数&#x2F;触发器中的表 ‘prj_base_info’，因为它已经被调用此存储函数&#x2F;触发器的语句使用。 1 queries executed, 0 success, 1 errors, 0 warnings 查询：update prj_base_info set type&#x3D;2,project_status&#x3D;600 where id&#x3D;’1537842899333’ 错误代码： 1442 Can&#39;t update table &#39;prj_base_info&#39; in stored function/trigger because it is already used by statement which invoked this stored function/trigger. 通过查阅资料了解，同表的更新不能在触发器里使用 update,而是直接使用set 修改为： DROP TRIGGER IF EXISTS update_complete_time; DELIMITER $ CREATE TRIGGER update_complete_time AFTER UPDATE ON prj_base_info FOR EACH ROW BEGIN IF (new.project_status=600) THEN SET new.complete_time =DATE_FORMAT(NOW(), &#39;%Y-%m-%d&#39;); END IF; END $ 结果发现还报错。。。 错误代码： 1362 Updating of NEW row is not allowed in after trigger 把 AFTER 修改为BEFORE即可： DROP TRIGGER IF EXISTS update_complete_time; DELIMITER $ CREATE TRIGGER update_complete_time BEFORE UPDATE ON prj_base_info FOR EACH ROW BEGIN IF (new.project_status=600) THEN SET new.complete_time =DATE_FORMAT(NOW(), &#39;%Y-%m-%d&#39;); END IF; END $ BEFORE 与 AFTER 区别： BEFORE：( insert、update )可以对 new 进行修改，AFTER 不能对 new 进行修改，两者都不能修改 old 数据。 对于 INSERT 语句, 只有 NEW 是合法的； 对于 DELETE 语句，只有 OLD 才合法； 对于 UPDATE 语句，NEW、OLD 可以同时使用。 总结：BEFORE 或 AFTER 关键字决定何时执行触发器动作，决定是在关联行的插入、修改或删除之前或者之后执行触发器动作。","categories":[],"tags":[]},{"title":"Welcome!","slug":"Welcome","date":"2023-05-03T01:44:02.000Z","updated":"2024-05-08T09:55:04.527Z","comments":true,"path":"/Welcome/","link":"","permalink":"http://arcueid.github.io/blog/Welcome/","excerpt":"","text":"欢迎光临 我会时不时在这里分享一些莫名其妙的感悟，文章和笔记，希望你能在这玩得开心！(o゜▽゜)o☆，感谢你的来访！","categories":[],"tags":[]}],"categories":[{"name":"日语","slug":"日语","permalink":"http://arcueid.github.io/blog/categories/%E6%97%A5%E8%AF%AD/"},{"name":"算法","slug":"算法","permalink":"http://arcueid.github.io/blog/categories/%E7%AE%97%E6%B3%95/"},{"name":"操作系统","slug":"操作系统","permalink":"http://arcueid.github.io/blog/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"Docker","slug":"Docker","permalink":"http://arcueid.github.io/blog/categories/Docker/"}],"tags":[{"name":"日语语法","slug":"日语语法","permalink":"http://arcueid.github.io/blog/tags/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95/"},{"name":"算法","slug":"算法","permalink":"http://arcueid.github.io/blog/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"http://arcueid.github.io/blog/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"name":"边界问题","slug":"边界问题","permalink":"http://arcueid.github.io/blog/tags/%E8%BE%B9%E7%95%8C%E9%97%AE%E9%A2%98/"},{"name":"操作系统","slug":"操作系统","permalink":"http://arcueid.github.io/blog/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"Docker","slug":"Docker","permalink":"http://arcueid.github.io/blog/tags/Docker/"}]}